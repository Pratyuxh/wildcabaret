{
  "openapi": "3.0.0",
  "info": {
    "description": "SuperMindsIT",
    "version": "1.0.0",
    "title": "Wild Cabaret API"
   },
  "servers": [
      {
        "url": "http://localhost:8080",
        "description": "Local server"
      },
      {
        "url": "https://wildcabaret-api-python.superminds.dev",
        "description": "Production server"
      }
   ],
  "tags": [
      {
        "name": "Authentication",
        "description": "API for Authentication. "
      },
      {
        "name": "Booking",
        "description": "API for Bookings. "
      },
      {
        "name": "Contact Us",
        "description": "API for Contact Requests. "
      },
      {
        "name": "Event",
        "description": "API for Events. "
      },
      {
        "name": "Newsletter",
        "description": "API for Subscribing Newsletters. "
      }
   ],
  "paths": {
      "/register": {
      "post": {
        "tags": [
          "Authentication"
        ],
        "summary": "Creates a new user",
        "description": "This endpoint will create a new user.\n\n__Usage__:\n\n1) Click on the **Try it out** button.\n\n2) Click on the **Execute** button to submit the request.\n\n**The below table defines the HTTP Status codes that this API may return**\n\n<table>\n  <tr>\n    <td>Status Code</td>\n    <td>Description</td>\n    <td>Reason</td>\n  </tr>\n  <tr>\n    <td>200</td>\n    <td>New User Registered</td>\n    <td>Register the User successfully </td>\n  </tr>\n  <tr>\n    <td>400</td>\n    <td>Bad Request</td>\n    <td>If user have incomplete request body.</td>\n  </tr>\n  <tr>\n    <td>401</td>\n    <td>Invalid Credentials</td>\n    <td>Invalid username or password</td>\n  </tr>\n  <tr>\n    <td>500</td>\n    <td>Server Error</td>\n    <td>If internal server error occured</td>\n  </tr>\n</table>",
        "requestBody": {
          "description": "Register Post Object",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/register"
              }
            }
          }
        },
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "New User Registered",
            "content": {
              "application/json": {
              "schema": {
              "$ref": "#/components/serverResponseExample/createRegisterSuccess"
                }
              }
            }
          }, 
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/serverResponseExample/createRegisterError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/serverResponseExample/invalidcredentialsError"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/serverResponseExample/serverError"
                }
              }
            }
          }
        }
      }
      },
      "/login": {
        "post": {
          "tags": [
            "Authentication"
          ],
          "summary": "Creates a new token",
          "description": "This endpoint will help to login in the system using the Bearer Token.\n\n__Usage__:\n\n1) Click on the **Try it out** button.\n\n2) Click on the **Execute** button to submit the request.\n\n**The below table defines the HTTP Status codes that this API may return**\n\n<table>\n  <tr>\n    <td>Status Code</td>\n    <td>Description</td>\n    <td>Reason</td>\n  </tr>\n  <tr>\n    <td>200</td>\n    <td>Token Created</td>\n    <td>Creates the token successfully </td>\n  </tr>\n  <tr>\n    <td>400</td>\n    <td>Bad Request</td>\n    <td>If user have incomplete request body.</td>\n  </tr>\n  <tr>\n    <td>401</td>\n    <td>Invalid Credentials</td>\n    <td>Invalid username or password</td>\n  </tr>\n  <tr>\n    <td>500</td>\n    <td>Server Error</td>\n    <td>If internal server error occured</td>\n  </tr>\n</table>",
          "requestBody": {
            "description": "Login Post Object",
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/login"
                }
              }
            }
          },
          "produces": [
            "application/json"
          ],
          "responses": {
            "200": {
              "description": "Token Created",
              "content": {
                "application/json": {
                "schema": {
                "$ref": "#/components/serverResponseExample/createLoginSuccess"
                  }
                }
              }
            }, 
            "400": {
              "description": "Bad Request.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/serverResponseExample/createLoginError"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/serverResponseExample/invalidcredentialsError"
                  }
                }
              }
            },
            "500": {
              "description": "Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/serverResponseExample/serverError"
                  }
                }
              }
            }
          }
        }
      },
      "/logout": {
        "delete": {
          "tags": [
            "Authentication"
          ],
          "summary": "Logouts the user",
          "description": "This endpoint will help the user to logout from the system.\n\n__Usage__:\n\n1) Click on the **Try it out** button.\n\n2) Click on the **Execute** button to submit the request.\n\n**The below table defines the HTTP Status codes that this API may return**\n\n<table>\n  <tr>\n    <td>Status Code</td>\n    <td>Description</td>\n    <td>Reason</td>\n  </tr>\n  <tr>\n    <td>200</td>\n    <td>Logged Out</td>\n    <td>Successfully logouts from the system.</td>\n  </tr>\n  <tr>\n    <td>401</td>\n    <td>Unauthorized</td>\n    <td>If token has been revoked.</td>\n  </tr>\n  <tr>\n    <td>500</td>\n    <td>Server Error</td>\n    <td>If Internal server error occured.</td>\n  </tr>\n</table>",
          "security":[{"JWT": {} }],
          "produces": [
            "application/json"
          ],
          "responses": {
            "200": {
              "description": "Logged out",
              "content": {
                "application/json": {
                "schema": {
                "$ref": "#/components/serverResponseExample/createLogoutSuccess"
                  }
                }
              }
            }, 
            "401": {
              "description": "Unauthorized Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/serverResponseExample/logoutUnauthorizedError"
                  }
                }
              }
            },
            "500": {
              "description": "Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/serverResponseExample/serverError"
                  }
                }
              }
            }
          }
        }
      },
      "/book-now": {
        "get": {
          "tags": ["Booking"],
          "summary": "Return bookings",
          "description": "This endpoint will get all bookings.\n\n__Usage__:\n\n1) Click on the **Try it out** button.\n\n2) Click on the **Execute** button to submit the request.\n\n**The below table defines the HTTP Status codes that this API may return**\n\n<table>\n  <tr>\n    <td>Status Code</td>\n    <td>Description</td>\n    <td>Reason</td>\n  </tr>\n  <tr>\n    <td>200</td>\n    <td>Booking Data</td>\n    <td>Return all the bookings.</td>\n  </tr>\n  <tr>\n   <td>500</td>\n    <td>Server Error</td>\n    <td>If Internal server error occured.</td>\n  </tr>\n</table>",
          "security":[{"JWT": {} }],
          "responses": {
            "200": {
              "description": "Booking Data",
              "content": {
                "application/json": {
                  "example": [
                    {
                      "_id": "655cc081add35235c1c1682c",
                      "name": "Fabio",
                      "contactNumber": "9999966666",
                      "contactEmail": "Fabio@superminds.in",
                      "showDate": "04.04.2024",
                      "numberOfGuests": "1000",
                      "dietaryRequirements": "10",
                      "message": "BlessUs"
                    },
                    {
                      "_id": "655cc081add35235c1c1682d",
                      "name": "Ian",
                      "contactNumber": "9999966666",
                      "contactEmail": "Ian@superminds.in",
                      "showDate": "04.04.2024",
                      "numberOfGuests": "1000",
                      "dietaryRequirements": "10",
                      "message": "BlessUs"
                    }
                  ]
                }
              }
            },
            "500": {
              "description": "Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/serverResponseExample/serverError"
                  }
                }
              }
            }
          }
        },
        "post": {
          "tags": [
            "Booking"
          ],
          "summary": "Create a new Booking",
          "description": "This endpoint will create a new booking.\n\n__Usage__:\n\n1) Click on the **Try it out** button.\n\n2) Click on the **Execute** button to submit the request.\n\n**The below table defines the HTTP Status codes that this API may return**\n\n<table>\n  <tr>\n    <td>Status Code</td>\n    <td>Description</td>\n    <td>Reason</td>\n  </tr>\n  <tr>\n    <td>200</td>\n    <td>Booking Created</td>\n    <td>Returns the created booking</td>\n  </tr>\n  <tr>\n    <td>400</td>\n    <td>Bad Request</td>\n    <td>Returns the validation errors.</td>\n  </tr>\n  <tr>\n    <td>401</td>\n    <td>Unauthorized</td>\n    <td>If Missing Authorization Header.</td>\n  </tr>\n  <tr>\n    <td>500</td>\n    <td>Server Error</td>\n    <td>If Internal server error occured.</td>\n  </tr>\n</table>",
          "requestBody": {
            "description": "Booking Post Object",
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/booking"
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Booking Created",
              "content": {
                "application/json": {
                "schema": {
                "$ref": "#/components/serverResponseExample/createBookingSuccess"
                  }
                }
              }
            }, 
            "400": {
              "description": "Bad Request.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/serverResponseExample/createBookingError"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/serverResponseExample/unauthorizedError"
                  }
                }
              }
            },
            "500": {
              "description": "Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/serverResponseExample/serverError"
                  }
                }
              }
            }
          }
        }
      },
      "/book-now/{id}": {
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "ID of the booking that we want to match",
            "type": "string"
          }
        ],
        "get": {
          "tags": [
            "Booking"
          ],
          "summary": "Get Booking with given ID",
          "description": "This endpoint will get Booking by given ID.\n\n__Usage__:\n\n1) Click on the **Try it out** button.\n\n2) Click on the **Execute** button to submit the request.\n\n**The below table defines the HTTP Status codes that this API may return**\n\n<table>\n  <tr>\n    <td>Status Code</td>\n    <td>Description</td>\n    <td>Reason</td>\n  </tr>\n  <tr>\n    <td>200</td>\n    <td>Booking Data</td>\n    <td>Returns the booking with given ID.</td>\n  </tr>\n  <tr>\n    <td>401</td>\n    <td>Unauthorized</td>\n    <td>If Missing Authorization Header.</td>\n  </tr>\n  <tr>\n    <td>404</td>\n    <td>Not Found</td>\n    <td>Booking Not Found</td>\n  </tr>\n  <tr>\n    <td>500</td>\n    <td>Server Error</td>\n    <td>If Internal server error occured.</td>\n  </tr>\n</table>",
          "security":[{"JWT": {} }],
          "parameters": [
            {
              "in": "path",
              "name": "id",
              "required": true,
              "description": "Booking ID",
              "schema": {
                "$ref": "#/components/schemas/id"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Booking Data",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/serverResponseExample/getBookingByIdSuccess"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/serverResponseExample/unauthorizedError"
                  }
                }
              }
            },
            "404": {
              "description": "Not Found Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/serverResponseExample/getBookingByIdNotFoundError"
                  }
                }
              }
            },
            "500": {
              "description": "Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/serverResponseExample/serverError"
                  }
                }
              }
            }
          }
        },
        "put": {
          "summary": "Update a Booking by ID",
          "description": "This endpoint will update a booking by given ID.\n\n__Usage__:\n\n1) Click on the **Try it out** button.\n\n2) Click on the **Execute** button to submit the request.\n\n**The below table defines the HTTP Status codes that this API may return**\n\n<table>\n  <tr>\n    <td>Status Code</td>\n    <td>Description</td>\n    <td>Reason</td>\n  </tr>\n  <tr>\n    <td>200</td>\n    <td>Booking Data</td>\n    <td>Updates the booking with given ID.</td>\n  </tr>\n  <tr>\n    <td>401</td>\n    <td>Unauthorized</td>\n    <td>If Missing Authorization Header.</td>\n  </tr>\n  <tr>\n    <td>404</td>\n    <td>Not Found</td>\n    <td>Booking Not Found</td>\n  </tr>\n  <tr>\n    <td>500</td>\n    <td>Server Error</td>\n    <td>If Internal server error occured.</td>\n  </tr>\n</table>",
          "security":[{"JWT": {} }],
          "tags": [
            "Booking"
          ],
          "parameters": [
            {
              "in": "path",
              "name": "id",
              "required": true,
              "description": "Update Booking",
              "schema": {
                "$ref": "#/components/schemas/id"
              }
            }
          ],
          "requestBody": {
            "description": "Update Booking",
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/booking"
                }
              }
            }
          },
          "produces": [
            "application/json"
          ],
          "responses": {
            "200": {
              "description": "Booking Data",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/serverResponseExample/updateBookingByIdSuccess"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/serverResponseExample/unauthorizedError"
                  }
                }
              }
            },
            "404": {
              "description": "Not Found Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/serverResponseExample/getBookingByIdNotFoundError"
                  }
                }
              }
            },
            "500": {
              "description": "Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/serverResponseExample/serverError"
                  }
                }
              }
            }
          }
        },
        "delete": {
          "summary": "Delete Booking by ID",
          "description": "This API Endpoint will delete Booking by ID.\n\n__Usage__:\n\n1) Click on the **Try it out** button.\n\n2) Click on the **Execute** button to submit the request.\n\n**The below table defines the HTTP Status codes that this API may return**\n\n<table>\n  <tr>\n    <td>Status Code</td>\n    <td>Description</td>\n    <td>Reason</td>\n  </tr>\n  <tr>\n    <td>200</td>\n    <td>Booking Data</td>\n    <td>Booking Deleted Successfully.</td>\n  </tr>\n  <tr>\n    <td>401</td>\n    <td>Unauthorized</td>\n    <td>If Missing Authorization Header.</td>\n  </tr>\n  <tr>\n    <td>404</td>\n    <td>Not Found</td>\n    <td>Booking Not Found</td>\n  </tr>\n  <tr>\n    <td>500</td>\n    <td>Server Error</td>\n    <td>If Internal server error occured.</td>\n  </tr>\n</table>",
          "security":[{"JWT": {} }],
          "tags": [
            "Booking"
          ],
          "parameters": [
            {
              "in": "path",
              "name": "id",
              "required": true,
              "description": "Delete booking",
              "schema": {
                "$ref": "#/components/schemas/id"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Booking Data",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/serverResponseExample/deleteBookingByIdSuccess"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/serverResponseExample/unauthorizedError"
                  }
                }
              }
            },
            "404": {
              "description": "Not Found Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/serverResponseExample/getBookingByIdNotFoundError"
                  }
                }
              }
            },
            "500": {
              "description": "Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/serverResponseExample/serverError"
                  }
                }
              }
            }
          }
        }
      },
      "/contact-us": {
          "get": {
            "tags": [
              "Contact Us"
            ],
            "summary": "Returns Contacts",
            "description": "This endpoint will get all contacts.\n\n__Usage__:\n\n1) Click on the **Try it out** button.\n\n2) Click on the **Execute** button to submit the request.\n\n**The below table defines the HTTP Status codes that this API may return**\n\n<table>\n  <tr>\n    <td>Status Code</td>\n    <td>Description</td>\n    <td>Reason</td>\n  </tr>\n  <tr>\n    <td>200</td>\n    <td>Contact Request Data</td>\n    <td>Return all the contact requests.</td>\n  </tr>\n  <tr>\n   <td>500</td>\n    <td>Server Error</td>\n    <td>If Internal server error occured.</td>\n  </tr>\n</table>",
            "security":[{"JWT": {} }],
            "responses": {
              "200": {
                "description": "Contact Us Request Data",
                "content": {
                  "application/json": {
                    "example": [
                      {
                      "_id":"655cc081add35235c1c1682c",
                      "contactEmail": "fabio@superminds.dev",
                      "contactNumber": "9999988888",
                      "dietaryRequirements": "5",
                      "message": "BlessUs",
                      "name": "Fabio",
                      "numberOfGuests": "10",
                      "showDate": "02.02.2024"
                    },
                    {
                      "_id":"655cc081add35235c1c1682c",
                      "contactEmail": "ian@superminds.dev",
                      "contactNumber": "9999988888",
                      "dietaryRequirements": "5",
                      "message": "BlessUs",
                      "name": "Ian",
                      "numberOfGuests": "10",
                      "showDate": "02.02.2024"
                    }
                    ]
                  }
                }
              },
              "500": {
                "description": "Server Error",
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/serverResponseExample/serverError"
                    }
                  }
                }
              }
            }
          },
          "post": {
            "tags": [
              "Contact Us"
            ],
            "summary": "Create a new Contact",
            "description": "This endpoint will create a new contact request.\n\n__Usage__:\n\n1) Click on the **Try it out** button.\n\n2) Click on the **Execute** button to submit the request.\n\n**The below table defines the HTTP Status codes that this API may return**\n\n<table>\n  <tr>\n    <td>Status Code</td>\n    <td>Description</td>\n    <td>Reason</td>\n  </tr>\n  <tr>\n    <td>200</td>\n    <td>Contact Request Created</td>\n    <td>Returns the created contact request.</td>\n  </tr>\n  <tr>\n    <td>400</td>\n    <td>Bad Request</td>\n    <td>Returns the validation errors.</td>\n  </tr>\n  <tr>\n    <td>401</td>\n    <td>Unauthorized</td>\n    <td>If Missing Authorization Header.</td>\n  </tr>\n  <tr>\n    <td>500</td>\n    <td>Server Error</td>\n    <td>If Internal server error occured.</td>\n  </tr>\n</table>",
            "requestBody": {
              "description": "Contact Request Object",
              "required": true,
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/contact"
                  }
                }
              }
            },
            "produces": [
              "application/json"
            ],
            "responses": {
              "200": {
                "description": "Contact Request Created",
                "content": {
                  "application/json": {
                  "schema": {
                  "$ref": "#/components/serverResponseExample/createContactSuccess"
                    }
                  }
                }
              }, 
              "400": {
                "description": "Bad Request.",
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/serverResponseExample/createContactError"
                    }
                  }
                }
              },
              "401": {
                "description": "Unauthorized Error",
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/serverResponseExample/unauthorizedError"
                    }
                  }
                }
              },
              "500": {
                "description": "Server Error",
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/serverResponseExample/serverError"
                    }
                  }
                }
              }
            }
          }
      },
      "/contact-us/{id}": {
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "required": true,
              "description": "ID of the contact that we want to match",
              "type": "string"
            }
          ],
          "get": {
            "tags": [
              "Contact Us"
            ],
            "summary": "Get contact with given ID",
            "description": "This endpoint will get contact by given ID.\n\n__Usage__:\n\n1) Click on the **Try it out** button.\n\n2) Click on the **Execute** button to submit the request.\n\n**The below table defines the HTTP Status codes that this API may return**\n\n<table>\n  <tr>\n    <td>Status Code</td>\n    <td>Description</td>\n    <td>Reason</td>\n  </tr>\n  <tr>\n    <td>200</td>\n    <td>Contact Request Data</td>\n    <td>Returns the contact request with given ID.</td>\n  </tr>\n  <tr>\n    <td>401</td>\n    <td>Unauthorized</td>\n    <td>If Missing Authorization Header.</td>\n  </tr>\n  <tr>\n    <td>404</td>\n    <td>Not Found</td>\n    <td>Contact Request Not Found</td>\n  </tr>\n  <tr>\n    <td>500</td>\n    <td>Server Error</td>\n    <td>If Internal server error occured.</td>\n  </tr>\n</table>",
            "security":[{"JWT": {} }],
            "parameters": [
              {
                "in": "path",
                "name": "id",
                "required": true,
                "description": "Contact ID",
                "schema": {
                  "$ref": "#/components/schemas/id"
                }
              }
            ],
            "responses": {
              "200": {
                "description": "Contact Request Data",
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/serverResponseExample/getContactByIdSuccess"
                    }
                  }
                }
              },
              "401": {
                "description": "Unauthorized Error",
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/serverResponseExample/unauthorizedError"
                    }
                  }
                }
              },
              "404": {
                "description": "Not Found Error",
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/serverResponseExample/getContactByIdNotFoundError"
                    }
                  }
                }
              },
              "500": {
                "description": "Server Error",
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/serverResponseExample/serverError"
                    }
                  }
                }
              }
            }
          },
          "put": {
            "summary": "Update a contact by ID",
            "description": "This endpoint will update a contact by given ID.\n\n__Usage__:\n\n1) Click on the **Try it out** button.\n\n2) Click on the **Execute** button to submit the request.\n\n**The below table defines the HTTP Status codes that this API may return**\n\n<table>\n  <tr>\n    <td>Status Code</td>\n    <td>Description</td>\n    <td>Reason</td>\n  </tr>\n  <tr>\n    <td>200</td>\n    <td>Contact Request Data</td>\n    <td>Updates the contact with given ID.</td>\n  </tr>\n  <tr>\n    <td>401</td>\n    <td>Unauthorized</td>\n    <td>If Missing Authorization Header.</td>\n  </tr>\n  <tr>\n    <td>404</td>\n    <td>Not Found</td>\n    <td>Contact Request Not Found</td>\n  </tr>\n  <tr>\n    <td>500</td>\n    <td>Server Error</td>\n    <td>If Internal server error occured.</td>\n  </tr>\n</table>",
            "security":[{"JWT": {} }],
            "tags": [
              "Contact Us"
            ],
            "parameters": [
              {
                "in": "path",
                "name": "id",
                "required": true,
                "description": "Contact Us",
                "schema": {
                  "$ref": "#/components/schemas/id"
                }
              }
            ],
            "requestBody": {
              "description": "Update a Contact",
              "required": true,
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/contact"
                  }
                }
              }
            },
            "produces": [
              "application/json"
            ],
            "responses": {
              "200": {
                "description": "Contact Request Data",
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/serverResponseExample/updateContactByIdSuccess"
                    }
                  }
                }
              },
              "401": {
                "description": "Unauthorized Error",
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/serverResponseExample/unauthorizedError"
                    }
                  }
                }
              },
              "404": {
                "description": "Not Found Error",
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/serverResponseExample/getContactByIdNotFoundError"
                    }
                  }
                }
              },
              "500": {
                "description": "Server Error",
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/serverResponseExample/serverError"
                    }
                  }
                }
              }
            }
          },
          "delete": {
            "summary": "Delete Contact by ID",
            "description": "This API Endpoint will delete contact by ID.\n\n__Usage__:\n\n1) Click on the **Try it out** button.\n\n2) Click on the **Execute** button to submit the request.\n\n**The below table defines the HTTP Status codes that this API may return**\n\n<table>\n  <tr>\n    <td>Status Code</td>\n    <td>Description</td>\n    <td>Reason</td>\n  </tr>\n  <tr>\n    <td>200</td>\n    <td>Contact Data</td>\n    <td>Contact Deleted Successfully.</td>\n  </tr>\n  <tr>\n    <td>401</td>\n    <td>Unauthorized</td>\n    <td>If Missing Authorization Header.</td>\n  </tr>\n  <tr>\n    <td>404</td>\n    <td>Not Found</td>\n    <td>Contact Not Found</td>\n  </tr>\n  <tr>\n    <td>500</td>\n    <td>Server Error</td>\n    <td>If Internal server error occured.</td>\n  </tr>\n</table>",
            "security":[{"JWT": {} }],
            "tags": [
              "Contact Us"
            ],
            "parameters": [
              {
                "in": "path",
                "name": "id",
                "required": true,
                "description": "Book contact",
                "schema": {
                  "$ref": "#/components/schemas/id"
                }
              }
            ],
            "responses": {
              "200": {
                "description": "Contact Data",
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/serverResponseExample/deleteContactByIdSuccess"
                    }
                  }
                }
              },
              "401": {
                "description": "Unauthorized Error",
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/serverResponseExample/unauthorizedError"
                    }
                  }
                }
              },
              "404": {
                "description": "Not Found Error",
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/serverResponseExample/getContactByIdNotFoundError"
                    }
                  }
                }
              },
              "500": {
                "description": "Server Error",
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/serverResponseExample/serverError"
                    }
                  }
                }
              }
            }
          }
      },
      "/events": {
          "get": {
            "tags": [
              "Event"
            ],
            "summary": "Return Events",
            "description": "This endpoint will get all events.\n\n__Usage__:\n\n1) Click on the **Try it out** button.\n\n2) Click on the **Execute** button to submit the request.\n\n**The below table defines the HTTP Status codes that this API may return**\n\n<table>\n  <tr>\n    <td>Status Code</td>\n    <td>Description</td>\n    <td>Reason</td>\n  </tr>\n  <tr>\n    <td>200</td>\n    <td>Event Request Data</td>\n    <td>Return all the event requests.</td>\n  </tr>\n  <tr>\n    <td>500</td>\n    <td>Server Error</td>\n    <td>If Internal server error occured.</td>\n  </tr>\n</table>",
            "security":[{"JWT": {} }],
            "responses": {
              "200": {
                "description": "Events Data",
                "content": {
                  "application/json": {
                    "example": [
                      {
                      "_id":"655cc081add35235c1c1682c",
                      "amount": "50",
                      "childAmount": "50",
                      "date": "01.01.1000",
                      "deposit": "100",
                      "description": "Thanks",                   
                      "meals": "5",
                      "reservationsEndsAt": "2",
                      "reservationsStartAt": "1",
                      "showStarts": "1",
                      "status": "book now",
                      "title": "MR."
                    },
                    {
                      "_id":"655cc081add35235c1c1682d",
                      "amount": "50",
                      "childAmount": "50",
                      "date": "01.01.1000",
                      "deposit": "100",
                      "description": "Thanks",
                      "meals": "5",
                      "reservationsEndsAt": "2",
                      "reservationsStartAt": "1",
                      "showStarts": "1",
                      "status": "cancelled",
                      "title": "MR."
                    }
                  ]
                  }
                }
              },
              "400": {
                "description": "Bad Request.",
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/serverResponseExample/validationEventError"
                    }
                  }
                }
              },
              "500": {
                "description": "Server Error",
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/serverResponseExample/serverError"
                    }
                  }
                }
              }
            }
          },
          "post": {
            "tags": [
              "Event"
            ],
            "summary": "Create a new Event",
            "description": "This endpoint will create a new event.\n\n__Usage__:\n\n1) Click on the **Try it out** button.\n\n2) Click on the **Execute** button to submit the request.\n\n3) The status must be one of **book now, sold out, cancelled**.\n\n**The below table defines the HTTP Status codes that this API may return**\n\n<table>\n  <tr>\n    <td>Status Code</td>\n    <td>Description</td>\n    <td>Reason</td>\n  </tr>\n  <tr>\n    <td>200</td>\n    <td>Event Created</td>\n    <td>Returns the event request.</td>\n  </tr>\n  <tr>\n    <td>400</td>\n    <td>Bad Request</td>\n    <td>Returns the validation errors.</td>\n  </tr>\n  <tr>\n    <td>401</td>\n    <td>Unauthorized</td>\n    <td>If Missing Authorization Header.</td>\n  </tr>\n  <tr>\n    <td>500</td>\n    <td>Server Error</td>\n    <td>If Internal server error occured.</td>\n  </tr>\n</table>",
            "security":[{"JWT": {} }],
            "requestBody": {
              "description": "Event Post Object",
              "required": true,
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/event"
                  }
                }
              }
            },
            "produces": [
              "application/json"
            ],
            "responses": {
              "200": {
                "description": "Event Created",
                "content": {
                  "application/json": {
                  "schema": {
                  "$ref": "#/components/serverResponseExample/createEventSuccess"
                    }
                  }
                }
              }, 
              "400": {
                "description": "Bad Request.",
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/serverResponseExample/createEventError"
                    }
                  }
                }
              },
              "401": {
                "description": "Unauthorized Error",
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/serverResponseExample/unauthorizedError"
                    }
                  }
                }
              },
              "500": {
                "description": "Server Error",
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/serverResponseExample/serverError"
                    }
                  }
                }
              }
            }
          }
      },
      "/events/{id}": {
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "required": true,
              "description": "ID of the event that we want to match",
              "type": "string"
            }
          ],
          "get": {
            "tags": [
              "Event"
            ],
            "summary": "Get event with given ID",
            "description": "This endpoint will get event by given ID.\n\n__Usage__:\n\n1) Click on the **Try it out** button.\n\n2) Click on the **Execute** button to submit the request.\n\n**The below table defines the HTTP Status codes that this API may return**\n\n<table>\n  <tr>\n    <td>Status Code</td>\n    <td>Description</td>\n    <td>Reason</td>\n  </tr>\n  <tr>\n    <td>200</td>\n    <td>Event Data</td>\n    <td>Returns the event with given ID.</td>\n  </tr>\n  <tr>\n    <td>401</td>\n    <td>Unauthorized</td>\n    <td>If Missing Authorization Header.</td>\n  </tr>\n  <tr>\n    <td>404</td>\n    <td>Not Found</td>\n    <td>Event Not Found</td>\n  </tr>\n  <tr>\n    <td>500</td>\n    <td>Server Error</td>\n    <td>If Internal server error occured.</td>\n  </tr>\n</table>",
            "securityDefinitions": {
              "bearerAuth": {
                "type": "apiKey",
                "in": "header",
                "name": "Authorization",
                "description": "Bearer token to access these api endpoints",
                "scheme": "bearer"
              }
            },
            "parameters": [
              {
                "in": "path",
                "name": "id",
                "required": true,
                "description": "Event id",
                "schema": {
                  "$ref": "#/components/schemas/id"
                }
              }
            ],
            "responses": {
              "200": {
                "description": "Event Data",
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/serverResponseExample/getEventByIdSuccess"
                    }
                  }
                }
              },
              "401": {
                "description": "Unauthorized Error",
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/serverResponseExample/unauthorizedError"
                    }
                  }
                }
              },
              "404": {
                "description": "Not Found Error",
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/serverResponseExample/getEventByIdNotFoundError"
                    }
                  }
                }
              },
              "500": {
                "description": "Server Error",
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/serverResponseExample/serverError"
                    }
                  }
                }
              }
            }
          },
          "put": {
            "summary": "Update a Event by ID",
            "description": "This endpoint will update Event by given ID.\n\n__Usage__:\n\n1) Click on the **Try it out** button.\n\n2) Click on the **Execute** button to submit the request.\n\n**The below table defines the HTTP Status codes that this API may return**\n\n<table>\n  <tr>\n    <td>Status Code</td>\n    <td>Description</td>\n    <td>Reason</td>\n  </tr>\n  <tr>\n    <td>200</td>\n    <td>Event Data</td>\n    <td>Updates the event with given ID.</td>\n  </tr>\n  <tr>\n    <td>401</td>\n    <td>Unauthorized</td>\n    <td>If Missing Authorization Header.</td>\n  </tr>\n  <tr>\n    <td>404</td>\n    <td>Not Found</td>\n    <td>Contact Request Not Found</td>\n  </tr>\n  <tr>\n    <td>500</td>\n    <td>Server Error</td>\n    <td>If Internal server error occured.</td>\n  </tr>\n</table>",         
            "security":[{"JWT": {} }],
            "tags": [
              "Event"
            ],
            "parameters": [
              {
                "in": "path",
                "name": "id",
                "required": true,
                "description": "Update Event",
                "schema": {
                  "$ref": "#/components/schemas/id"
                }
              }
            ],
            "requestBody": {
              "description": "Update Event Object",
              "required": true,
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/event"
                  }
                }
              }
            },
            "produces": [
              "application/json"
            ],
            "responses": {
              "200": {
                "description": "Event Data",
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/serverResponseExample/updateEventByIdSuccess"
                    }
                  }
                }
              },
              "401": {
                "description": "Unauthorized Error",
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/serverResponseExample/unauthorizedError"
                    }
                  }
                }
              },
              "404": {
                "description": "Not Found Error",
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/serverResponseExample/getEventByIdNotFoundError"
                    }
                  }
                }
              },
              "500": {
                "description": "Server Error",
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/serverResponseExample/serverError"
                    }
                  }
                }
              }
            }
          },
          "delete": {
            "summary": "Delete Event by ID",
            "description": "This API Endpoint will delete event by ID.\n\n__Usage__:\n\n1) Click on the **Try it out** button.\n\n2) Click on the **Execute** button to submit the request.\n\n**The below table defines the HTTP Status codes that this API may return**\n\n<table>\n  <tr>\n    <td>Status Code</td>\n    <td>Description</td>\n    <td>Reason</td>\n  </tr>\n  <tr>\n    <td>200</td>\n    <td>Event Data</td>\n    <td>Event Deleted Successfully.</td>\n  </tr>\n  <tr>\n    <td>401</td>\n    <td>Unauthorized</td>\n    <td>If Missing Authorization Header.</td>\n  </tr>\n  <tr>\n    <td>404</td>\n    <td>Not Found</td>\n    <td>Event Not Found</td>\n  </tr>\n  <tr>\n    <td>500</td>\n    <td>Server Error</td>\n    <td>If Internal server error occured.</td>\n  </tr>\n</table>",       
            "security":[{"JWT": {} }],
            "tags": [
              "Event"
            ],
            "parameters": [
              {
                "in": "path",
                "name": "id",
                "required": true,
                "description": "Delete Event",
                "schema": {
                  "$ref": "#/components/schemas/id"
                }
              }
            ],
            "responses": {
              "200": {
                "description": "Event Data",
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/serverResponseExample/deleteEventByIdSuccess"
                    }
                  }
                }
              },
              "401": {
                "description": "Unauthorized Error",
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/serverResponseExample/unauthorizedError"
                    }
                  }
                }
              },
              "404": {
                "description": "Not Found Error",
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/serverResponseExample/getEventByIdNotFoundError"
                    }
                  }
                }
              },
              "500": {
                "description": "Server Error",
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/serverResponseExample/serverError"
                    }
                  }
                }
              }
            }
          }  
      },
      "/events/{id}/image": {
        "post": {
          "tags": [
            "Event"
          ],
          "summary": "Upload an Image",
          "description": "This endpoint will upload a new image.\n\n__Usage__:\n\n1) Click on the **Try it out** button.\n\n2) Click on the **Execute** button to submit the request.\n\n**The below table defines the HTTP Status codes that this API may return**\n\n<table>\n  <tr>\n    <td>Status Code</td>\n    <td>Description</td>\n    <td>Reason</td>\n  </tr>\n  <tr>\n    <td>200</td>\n    <td>Event Image Uploaded</td>\n    <td>Returns the fileurl.</td>\n  </tr>\n  <tr>\n    <td>401</td>\n    <td>Unauthorized</td>\n    <td>If Missing Authorization Header.</td>\n  </tr>\n  <tr>\n    <td>500</td>\n    <td>Server Error</td>\n    <td>If Internal server error occured.</td>\n  </tr>\n</table>",
          "security":[{"JWT": {} }],
          "requestBody": {
            "content": {
              "multipart/form-data": {
                "schema": { 
                  "type": "object",
                  "properties": {
                    "file": {
                      "type": "string",
                      "format": "binary"
                    },
                    "id": {
                      "type": "string",
                      "format": "string"
                    },
                    "device_type": {
                      "type": "string",
                      "format": "string"
                    }
                  }
                }
              }
            }
          },
          "produces": [
            "application/json"
          ],
          "responses": {
            "200": {
              "description": "Event Image Uploaded",
              "content": {
                "application/json": {
                "schema": {
                "$ref": "#/components/serverResponseExample/createEventImageSuccess"
                  }
                }
              }
            }, 
            "401": {
              "description": "Unauthorized Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/serverResponseExample/unauthorizedError"
                  }
                }
              }
            },
            "500": {
              "description": "Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/serverResponseExample/serverError"
                  }
                }
              }
            }
          }
        }
      },
      "/events/{id}/image/{filename}": {
        "delete": {
          "summary": "Delete Event Image",
          "description": "This API Endpoint will delete event image.\n\n__Usage__:\n\n1) Click on the **Try it out** button.\n\n2) Click on the **Execute** button to submit the request.\n\n**The below table defines the HTTP Status codes that this API may return**\n\n<table>\n  <tr>\n    <td>Status Code</td>\n    <td>Description</td>\n    <td>Reason</td>\n  </tr>\n  <tr>\n    <td>200</td>\n    <td>Event Image Data</td>\n    <td>File abc.jpg deleted successfully.</td>\n  </tr>\n  <tr>\n    <td>401</td>\n    <td>Unauthorized</td>\n    <td>If Missing Authorization Header.</td>\n  </tr>\n  <tr>\n    <td>404</td>\n    <td>Not Found</td>\n    <td>File Not Found</td>\n  </tr>\n  <tr>\n    <td>500</td>\n    <td>Server Error</td>\n    <td>If Internal server error occured.</td>\n  </tr>\n</table>",       
          "security":[{"JWT": {} }],
          "tags": [
            "Event"
          ],
          "parameters": [
            {
              "in": "path",
              "name": "id",
              "required": true,
              "description": "Delete Event Image",
              "schema": {
                "$ref": "#/components/schemas/id"
              }
            },
            {
              "in": "path",
              "name": "filename",
              "required": true,
              "description": "Image Filename",
              "schema": {
                  "type": "string"
              }
          }
          ],
          "responses": {
            "200": {
              "description": "Event Image Data",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/serverResponseExample/deleteEventImageByIdSuccess"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/serverResponseExample/unauthorizedError"
                  }
                }
              }
            },
            "404": {
              "description": "Not Found Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/serverResponseExample/getEventByIdNotFoundError"
                  }
                }
              }
            },
            "500": {
              "description": "Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/serverResponseExample/serverError"
                  }
                }
              }
            }
          }
        }
      },
      "/newsletter-signup": {
        "post": {
          "tags": [
            "Newsletter"
          ],
          "summary": "Subscribe the Newsletter",
          "description": "This endpoint will subscribe the newsletter.\n\n__Usage__:\n\n1) Click on the **Try it out** button.\n\n2) Click on the **Execute** button to submit the request.\n\n**The below table defines the HTTP Status codes that this API may return**\n\n<table>\n  <tr>\n    <td>Status Code</td>\n    <td>Description</td>\n    <td>Reason</td>\n  </tr>\n  <tr>\n    <td>200</td>\n    <td>Newsletter Subscribed</td>\n    <td>Returns the newsletter data.</td>\n  </tr>\n  <tr>\n    <td>400</td>\n    <td>Bad Request</td>\n    <td>Contact Email is required</td>\n  </tr>\n  <tr>\n    <td>401</td>\n    <td>Unauthorized</td>\n    <td>If Missing Authorization Header.</td>\n  </tr>\n  <tr>\n    <td>500</td>\n    <td>Server Error</td>\n    <td>If Internal server error occured.</td>\n  </tr>\n</table>",
          "requestBody": {
            "description": "Newsletter Post Object",
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/newsletter"
                }
              }
            }
          },
          "produces": [
            "application/json"
          ],
          "responses": {
            "200": {
              "description": "Newsletter Subscribed",
              "content": {
                "application/json": {
                "schema": {
                "$ref": "#/components/serverResponseExample/createNewsletterSuccess"
                  }
                }
              }
            }, 
            "400": {
              "description": "Bad Request.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/serverResponseExample/createNewsletterError"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/serverResponseExample/unauthorizedError"
                  }
                }
              }
            },
            "500": {
              "description": "Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/serverResponseExample/serverError"
                  }
                }
              }
            }
          }
        },
        "get": {
          "tags": [
            "Newsletter"
          ],
          "summary": "Return Subscribers",
          "description": "This endpoint will return all Subscribers.\n\n__Usage__:\n\n1) Click on the **Try it out** button.\n\n2) Click on the **Execute** button to submit the request.\n\n**The below table defines the HTTP Status codes that this API may return**\n\n<table>\n  <tr>\n    <td>Status Code</td>\n    <td>Description</td>\n    <td>Reason</td>\n  </tr>\n  <tr>\n    <td>200</td>\n    <td>Subscribers Data</td>\n    <td>Return all the subscribers.</td>\n  </tr>\n  <tr>\n    <td>401</td>\n    <td>Unauthorized</td>\n    <td>If Missing Authorization Header</td>\n  </tr>\n  <tr>\n    <td>500</td>\n    <td>Server Error</td>\n    <td>If Internal server error occured.</td>\n  </tr>\n</table>",           
          "security":[{"JWT": {} }],
          "responses": {
            "200": {
              "description": "Subscriber Data",
              "content": {
                "application/json": {
                  "example": [
                  {
                    "_id":"655cc081add35235c1c1682c",
                    "email": "fabio@superminds.dev",
                    "subscribed": true,
                    "created_at": "2024-01-23T06:24:33.175+00:00",
                    "updated_at": "2024-01-23T06:24:33.175+00:00"
                  },
                  {
                    "_id":"655cc081add35235c1c1682c",
                    "email": "ian@superminds.dev",
                    "subscribed": false,
                    "created_at": "2024-01-23T06:24:33.175+00:00",
                    "updated_at": "2024-01-23T06:24:33.175+00:00"
                  }
                ]
                }
              }
            },
            "401": {
              "description": "Unauthorized Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/serverResponseExample/unauthorizedError"
                  }
                }
              }
            },
            "500": {
              "description": "Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/serverResponseExample/serverError"
                  }
                }
              }
            }
          }
        }
      },
      "/unsubscribe": {
        "post": {
          "tags": [
            "Newsletter"
          ],
          "summary": "Newsletter Unsubscribed",
          "description": "This endpoint will unsubscribe the newsletter.\n\n__Usage__:\n\n1) Click on the **Try it out** button.\n\n2) Click on the **Execute** button to submit the request.\n\n**The below table defines the HTTP Status codes that this API may return**\n\n<table>\n  <tr>\n    <td>Status Code</td>\n    <td>Description</td>\n    <td>Reason</td>\n  </tr>\n  <tr>\n    <td>200</td>\n    <td>Newsletter Unsubscribed</td>\n    <td>Returns the unsubscribed newsletter data.</td>\n  </tr>\n  <tr>\n    <td>400</td>\n    <td>Bad Request</td>\n    <td>Contact Email is required</td>\n  </tr>\n  <tr>\n    <td>401</td>\n    <td>Unauthorized</td>\n    <td>If Missing Authorization Header.</td>\n  </tr>\n  <tr>\n    <td>500</td>\n    <td>Server Error</td>\n    <td>If Internal server error occured.</td>\n  </tr>\n</table>",
          "requestBody": {
            "description": "Newsletter Post Object",
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/newsletter"
                }
              }
            }
          },
          "produces": [
            "application/json"
          ],
          "responses": {
            "200": {
              "description": "Newsletter Unsubscribed",
              "content": {
                "application/json": {
                "schema": {
                "$ref": "#/components/serverResponseExample/createNewsletterSuccess"
                  }
                }
              }
            }, 
            "400": {
              "description": "Bad Request.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/serverResponseExample/createNewsletterError"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/serverResponseExample/unauthorizedError"
                  }
                }
              }
            },
            "500": {
              "description": "Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/serverResponseExample/serverError"
                  }
                }
              }
            }
          }
        }
      }
   },
  "components": {
    "securitySchemes":{
    "JWT":{
        "in": "header",
        "name": "Authorization",
        "type": "apiKey",
        "description": "JWT authorization token. Include 'Bearer' followed by a space and the token value."
       }
     },
    "schemas": {
      "id": {
        "properties": {
          "id": {
            "type": "string"
          }
        }
      },
      "register": {
        "type": "object",
        "required": ["username", "password"],
        "properties": {
            "username": {
                "type": "string",
                "format": "string"
              },
            "password": {
                "type": "string",
                "format": "string"
              }
        }
      },
      "login": {
        "type": "object",
        "required": ["username", "password"],
        "properties": {
            "username": {
                "type": "string",
                "format": "string"
              },
            "password": {
                "type": "string",
                "format": "number"
              }
        }
      },
      "logout": {
        "type": "object",
        "required": ["username", "password"],
        "properties": {
            "username": {
                "type": "string",
                "format": "string"
              },
            "password": {
                "type": "string",
                "format": "number"
              }
        }
      },
      "booking": {
        "type": "object",
        "required": ["name", "contactNumber", "contactEmail", "showDate", "numberOfGuests", "dietaryRequirements"],
        "properties": {
            "name": {
                "type": "string",
                "format": "string"
              },
            "contactNumber": {
                "type": "string",
                "format": "number"
              },
            "contactEmail": {
                "type": "string",
                "format": "email"
              },
            "showDate": {
                "type": "string",
                "format": "string"
              },
            "numberOfGuests": {
                "type": "string",
                "format": "number"
              },
            "dietaryRequirements": {
                "type": "string",
                "format": "string"
              },
            "message": {
                "type": "string",
                "format": "string"
              }
        }
      },
      "event": {
        "type": "object",
        "required": ["amount", "childAmount", "date", "deposit", "description", "meals", "reservationsStartAt", "reservationsEndsAt", "showStarts", "status", "title"],
        "properties": {
              "amount": {
                "type": "string",
                "format": "float",
                "minimum": "0"
              },
              "childAmount": {
                "type": "string",
                "format": "string",
                "minimum": "0"
              },
              "date": {
                "type": "string",
                "format": "string"
              },
              "deposit": {
                "type": "string",
                "format": "float",
                "minimum": "100"
              },
              "description": {
                "type": "string",
                "format": "string"
              },
              "meals": {
                "type": "string",
                "format": "string",
                "minimum": "1"
              },
              "reservationsStartAt": {
                "type": "string",
                "format": "string"
              },
              "reservationsEndsAt": {
                "type": "string",
                "format": "string"
              },
              "showStarts": {
                "type": "string",
                "format": "string"
              },
              "status": {
                "type": "string",
                "format": "string"
              },
              "title": {
                "type": "string",
                "format": "string"
              }
        }
      },
      "contact": {
        "type": "object",
        "required": ["name", "contactNumber", "contactEmail", "showDate", "numberOfGuests", "dietaryRequirements"],
        "properties": {
            "name": {
                "type": "string",
                "format": "string"
              },
            "contactNumber": {
                "type": "string",
                "format": "number"
              },
            "contactEmail": {
                "type": "string",
                "format": "email"
              },
            "showDate": {
                "type": "string",
                "format": "string"
              },
            "numberOfGuests": {
                "type": "string",
                "format": "number",
                "minimum": "1"
              },
            "dietaryRequirements": {
                "type": "string",
                "format": "string"
              },
            "message": {
                "type": "string",
                "format": "string"
              }
        }
      },
      "newsletter": {
        "type": "object",
        "required": ["email"],
        "properties": {
            "email": {
                "type": "string",
                "format": "email"
            }
        }
      }
     },
    "serverResponseExample": {
    "notFound": {
      "message": "Not Found"
    },
    "serverError": {
      "example": {
        "message": "Internal server error"
      }
    },
    "invalidcredentialsError": {
      "example": {
        "msg": "Invalid Username or Password"
      }
    },
    "unauthorizedError": {
      "example": {
        "msg": "Missing Authorization Header"
      }
    },
    "logoutUnauthorizedError": {
      "example": {
        "msg": "Token has been revoked"
      }
    },
    "createRegisterError": {
      "type": "object",
        "properties": {
          "errors": {
            "type": "array",
              "example": ["Username is required", "Password is required"]
        }
      }
    },
    "createLoginError": {
      "type": "object",
        "properties": {
          "errors": {
            "type": "array",
              "example": ["Username is required", "Password is required"]
        }
      }
    },
    "createLogoutError": {
      "type": "object",
        "properties": {
          "errors": {
            "type": "array",
              "example": ["Access Token is required"]
        }
      }
    },
    "createBookingError": {
      "type": "object",
        "properties": {
          "errors": {
            "type": "array",
              "example": ["contactEmail is required", "contactNumber is required", "dietaryRequirements is required", "name is required", "numberOfGuests is required", "showDate is required", "message is optional"]
        }
      }
    },
    "createContactError": {
      "type": "object",
        "properties": {
          "errors": {
            "type": "array",
              "example": ["contactEmail is required", "contactNumber is required", "dietaryRequirements is required", "name is required", "numberOfGuests is required", "showDate is required", "message is optional"]
        }
      }
    },
    "createEventError": {
      "type": "object",
        "properties": {
          "errors": {
            "type": "array",
              "example": ["amount is required", "childAmount is required", "date is required", "deposit is required", "description is required", "meals is required", "reservationsStartAt is required", "reservationsEndsAt is required", "showStarts is required", "status is required", "title is required"]
        }
      }
    },
    "validationEventError": {
      "type": "object",
        "properties": {
          "errors": {
            "type": "array",
              "example": ["status is required", "status must be one of book now, sold out, cancelled."]
        }
      }
    },
    "createNewsletterError": {
      "type": "object",
        "properties": {
          "errors": {
            "type": "array",
              "example": ["ContactEmail is required"]
        }
      }
    },
    "createRegisterSuccess": {
      "example": {
        "message": "User registered successfully"
      }
    },
    "createLoginSuccess": {
      "example": {
        "access_token" :"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJmcmVzaCI6ZmFsc2UsImlhdCI6MTcwMTMyNDI0NSwianRpIjoiMGJkNWI2ZGQtYjc5Yy00ODBkLWE3NzAtMzMyYmVkMWFkMWU3IiwidHlwZSI6ImFjY2VzcyIsInN1YiI6InVzZXIxIiwibmJmIjoxNzAxMzI0MjQ1LCJleHAiOjE3MDEzMjUxNDV9.E1nzEIXCqMMmmE5eGbo6zdEOpVFV_bWeqFzzZ8Zg_48"
      }
    },
    "createLogoutSuccess": {
      "example": {
        "message": "Successfully logged out"
      }
    },
    "createBookingSuccess": {
      "example": {
        "_id":"655cc081add35235c1c1682c",
        "contactEmail": "fabio@superminds.dev",
        "contactNumber": "9999988888",
        "dietaryRequirements": "5",
        "message": "BlessUs",
        "name": "Fabio",
        "numberOfGuests": "10",
        "showDate": "02.02.2024"   
      }
    },
    "createContactSuccess": {
      "example": {
        "_id":"655cc081add35235c1c1682c",
        "contactEmail": "fabio@superminds.dev",
        "contactNumber": "9999988888",
        "dietaryRequirements": "5",
        "message": "BlessUs",
        "name": "Fabio",
        "numberOfGuests": "10",
        "showDate": "02.02.2024"
      }
    },
    "createEventSuccess": {
      "example": {
        "_id":"655cc081add35235c1c1682c",
        "amount": "50",
        "childAmount": "50",
        "date": "01.01.1000",
        "deposit": "100",
        "description": "Thanks",
        "meals": "5",
        "reservationsEndsAt": "2",
        "reservationsStartAt": "1",
        "showStarts": "1",
        "status": "Accepted",
        "title": "MR."
      }
    },
    "createEventImageSuccess": {
      "example": {
        "file_url": "https://wild-cabarets.fra1.digitaloceanspaces.com/wild-cabarets/filename",
        "message": "Image uploaded successfully"
      }
    },
    "createNewsletterSuccess": {
      "example": {
        "_id":"655cc081add35235c1c1682c",
        "email": "ian@superminds.dev"
      }
    },
    "getBookingByIdSuccess": {
      "example": {
        "_id":"655cc081add35235c1c1682c",
        "contactEmail": "fabio@superminds.dev",
        "contactNumber": "9999988888",
        "dietaryRequirements": "5",
        "message": "BlessUs",
        "name": "Fabio",
        "numberOfGuests": "10",
        "showDate": "02.02.2024"
        
      }
    },
    "getContactByIdSuccess": {
      "example": {
        "_id":"655cc081add35235c1c1682c",
        "contactEmail": "fabio@superminds.dev",
        "contactNumber": "9999988888",
        "dietaryRequirements": "5",
        "message": "BlessUs",
        "name": "Fabio",
        "numberOfGuests": "10",
        "showDate": "02.02.2024"
      }
    },
    "getEventByIdSuccess": {
      "example": {
        "_id":"655cc081add35235c1c1682c",
        "amount": 100,
        "childAmount": 100,
        "date": "02.02.2024",
        "deposit": "9999988888",
        "description": "Nice event",
        "meals": "10",
        "reservationsEndsAt": "9",
        "reservationsStartAt": "5",
        "showStarts": "4",
        "status": "cancelled",
        "title": "event"
      }
    },
    "getNewsletterByIdSuccess": {
      "example": {
        "email": "fabio@superminds.dev",
        "_id":"655cc081add35235c1c1682c"
      }
    },
    "getBookingByIdNotFoundError": {
      "example": {
        "message": "Booking not found" 
      }
    },
    "getContactByIdNotFoundError": {
      "example": {
        "message": "Contact not found" 
      }
    },
    "getEventByIdNotFoundError": {
      "example": {
        "message": "Event not found" 
      }
    },
    "getNewsletterByIdNotFoundError": {
      "example": {
        "message": "Newsletter not found" 
      }
    },
    "updateBookingByIdSuccess": {
      "example": {
        "_id":"655cc081add35235c1c1682c",
        "contactEmail": "fabio@superminds.dev",
        "contactNumber": "9999988888",
        "dietaryRequirements": "5",
        "message": "BlessUs",
        "name": "Fabio",
        "numberOfGuests": "10",
        "showDate": "02.02.2024"
      }
    },
    "updateContactByIdSuccess": {
      "example": {
        "_id":"655cc081add35235c1c1682c",
        "contactEmail": "fabio@superminds.dev",
        "contactNumber": "9999988888",
        "dietaryRequirements": "5",
        "message": "BlessUs",
        "name": "Fabio",
        "numberOfGuests": "10",
        "showDate": "02.02.2024"
      }
    },
    "updateEventByIdSuccess": {
      "example": {
        "_id":"655cc081add35235c1c1682c",
        "amount": "50",
        "childAmount": "50",
        "date": "01.01.1000",
        "deposit": "100",
        "description": "Thanks",
        "meals": "5",
        "reservationsEndsAt": "2",
        "reservationsStartAt": "1",
        "showStarts": "1",
        "status": "Accepted",
        "title": "MR."
      }
    },
    "updateNewsletterByIdSuccess": {
      "example": {
        "_id":"655cc081add35235c1c1682c",
        "email": "ian@superminds.dev"
      }
    },
    "deleteBookingByIdSuccess": {
      "example": {
        "message": "Booking Deleted successfully"
      }
    },
    "deleteContactByIdSuccess": {
      "example": {
        "message": "Contact Deleted successfully"
      }
    },
    "deleteEventByIdSuccess": {
      "example": {
        "message": "Event Deleted successfully"
      }
    },
    "deleteEventImageByIdSuccess": {
      "example": {
        "message": "File gradientrectangle.jpg deleted successfully"
      }
    },
    "deleteNewsletterByIdSuccess": {
      "example": {
        "message": "Newsletter Deleted successfully"
      }
    }
     }
    }
  }